class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
       int n=grid.size();
       int m=grid[0].size();
       int vis[n][m];
       int t=0;
       int count=0;
       queue<pair<pair<int,int>,int>> q;
       for(int i=0;i<grid.size();i++){
           for(int j=0;j<grid[0].size();j++){
               if(grid[i][j]==2){
                   q.push({{i,j},0});
                   vis[i][j]=2;
               }
            
               else{
                   vis[i][j]=0;
                   
               }
               if(grid[i][j]==1) count++;
           }
       }
    int time=0;
    int cnt=0;
    int drow[]={-1,0,1,0};
    int dcol[]={0,1,0,-1};
    while(q.size()!=0){
       int r=q.front().first.first;
       int c=q.front().first.second;
       int t=q.front().second;
       time=max(t,time);
       q.pop();
       for(int i=0;i<4;i++){
           int nr=r+drow[i];
           int nc=c+dcol[i];
           if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]==1 && vis[nr][nc]!=2){
               q.push({{nr,nc},t+1});
               vis[nr][nc]=2;
               cnt++;
           }
       }
    }
         
    if(count!=cnt) return -1;
    return time;
    }
};
